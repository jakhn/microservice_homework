// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: protos/user_service/user_service.proto

package user_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	GetUserById(ctx context.Context, in *UserPrimeryKey, opts ...grpc.CallOption) (*User, error)
	Add(ctx context.Context, in *Sum, opts ...grpc.CallOption) (*SumA_B, error)
	Subtraction(ctx context.Context, in *SubtReq, opts ...grpc.CallOption) (*SubtResp, error)
	Multiplication(ctx context.Context, in *MultReq, opts ...grpc.CallOption) (*MultResp, error)
	Division(ctx context.Context, in *DivReq, opts ...grpc.CallOption) (*DivResp, error)
	SquareRoot(ctx context.Context, in *SqrtReq, opts ...grpc.CallOption) (*SqrtResp, error)
	Power(ctx context.Context, in *PowReq, opts ...grpc.CallOption) (*PowResp, error)
	ArrayMin(ctx context.Context, in *MnReq, opts ...grpc.CallOption) (*MnResp, error)
	ArrayMax(ctx context.Context, in *MxReq, opts ...grpc.CallOption) (*MxResp, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) GetUserById(ctx context.Context, in *UserPrimeryKey, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/user_service.UserService/GetUserById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Add(ctx context.Context, in *Sum, opts ...grpc.CallOption) (*SumA_B, error) {
	out := new(SumA_B)
	err := c.cc.Invoke(ctx, "/user_service.UserService/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Subtraction(ctx context.Context, in *SubtReq, opts ...grpc.CallOption) (*SubtResp, error) {
	out := new(SubtResp)
	err := c.cc.Invoke(ctx, "/user_service.UserService/Subtraction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Multiplication(ctx context.Context, in *MultReq, opts ...grpc.CallOption) (*MultResp, error) {
	out := new(MultResp)
	err := c.cc.Invoke(ctx, "/user_service.UserService/Multiplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Division(ctx context.Context, in *DivReq, opts ...grpc.CallOption) (*DivResp, error) {
	out := new(DivResp)
	err := c.cc.Invoke(ctx, "/user_service.UserService/Division", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SquareRoot(ctx context.Context, in *SqrtReq, opts ...grpc.CallOption) (*SqrtResp, error) {
	out := new(SqrtResp)
	err := c.cc.Invoke(ctx, "/user_service.UserService/SquareRoot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Power(ctx context.Context, in *PowReq, opts ...grpc.CallOption) (*PowResp, error) {
	out := new(PowResp)
	err := c.cc.Invoke(ctx, "/user_service.UserService/Power", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ArrayMin(ctx context.Context, in *MnReq, opts ...grpc.CallOption) (*MnResp, error) {
	out := new(MnResp)
	err := c.cc.Invoke(ctx, "/user_service.UserService/ArrayMin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ArrayMax(ctx context.Context, in *MxReq, opts ...grpc.CallOption) (*MxResp, error) {
	out := new(MxResp)
	err := c.cc.Invoke(ctx, "/user_service.UserService/ArrayMax", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	GetUserById(context.Context, *UserPrimeryKey) (*User, error)
	Add(context.Context, *Sum) (*SumA_B, error)
	Subtraction(context.Context, *SubtReq) (*SubtResp, error)
	Multiplication(context.Context, *MultReq) (*MultResp, error)
	Division(context.Context, *DivReq) (*DivResp, error)
	SquareRoot(context.Context, *SqrtReq) (*SqrtResp, error)
	Power(context.Context, *PowReq) (*PowResp, error)
	ArrayMin(context.Context, *MnReq) (*MnResp, error)
	ArrayMax(context.Context, *MxReq) (*MxResp, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) GetUserById(context.Context, *UserPrimeryKey) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserById not implemented")
}
func (UnimplementedUserServiceServer) Add(context.Context, *Sum) (*SumA_B, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedUserServiceServer) Subtraction(context.Context, *SubtReq) (*SubtResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subtraction not implemented")
}
func (UnimplementedUserServiceServer) Multiplication(context.Context, *MultReq) (*MultResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Multiplication not implemented")
}
func (UnimplementedUserServiceServer) Division(context.Context, *DivReq) (*DivResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Division not implemented")
}
func (UnimplementedUserServiceServer) SquareRoot(context.Context, *SqrtReq) (*SqrtResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SquareRoot not implemented")
}
func (UnimplementedUserServiceServer) Power(context.Context, *PowReq) (*PowResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Power not implemented")
}
func (UnimplementedUserServiceServer) ArrayMin(context.Context, *MnReq) (*MnResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArrayMin not implemented")
}
func (UnimplementedUserServiceServer) ArrayMax(context.Context, *MxReq) (*MxResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArrayMax not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_GetUserById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserPrimeryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_service.UserService/GetUserById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserById(ctx, req.(*UserPrimeryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Sum)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_service.UserService/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Add(ctx, req.(*Sum))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Subtraction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubtReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Subtraction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_service.UserService/Subtraction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Subtraction(ctx, req.(*SubtReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Multiplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Multiplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_service.UserService/Multiplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Multiplication(ctx, req.(*MultReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Division_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DivReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Division(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_service.UserService/Division",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Division(ctx, req.(*DivReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SquareRoot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqrtReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SquareRoot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_service.UserService/SquareRoot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SquareRoot(ctx, req.(*SqrtReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Power_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PowReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Power(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_service.UserService/Power",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Power(ctx, req.(*PowReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ArrayMin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MnReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ArrayMin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_service.UserService/ArrayMin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ArrayMin(ctx, req.(*MnReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ArrayMax_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MxReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ArrayMax(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_service.UserService/ArrayMax",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ArrayMax(ctx, req.(*MxReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user_service.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserById",
			Handler:    _UserService_GetUserById_Handler,
		},
		{
			MethodName: "Add",
			Handler:    _UserService_Add_Handler,
		},
		{
			MethodName: "Subtraction",
			Handler:    _UserService_Subtraction_Handler,
		},
		{
			MethodName: "Multiplication",
			Handler:    _UserService_Multiplication_Handler,
		},
		{
			MethodName: "Division",
			Handler:    _UserService_Division_Handler,
		},
		{
			MethodName: "SquareRoot",
			Handler:    _UserService_SquareRoot_Handler,
		},
		{
			MethodName: "Power",
			Handler:    _UserService_Power_Handler,
		},
		{
			MethodName: "ArrayMin",
			Handler:    _UserService_ArrayMin_Handler,
		},
		{
			MethodName: "ArrayMax",
			Handler:    _UserService_ArrayMax_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/user_service/user_service.proto",
}
